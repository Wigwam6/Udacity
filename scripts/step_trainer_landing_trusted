import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue import DynamicFrame

def sparkSqlQuery(glueContext, query, mapping, transformation_ctx) -> DynamicFrame:
    for alias, frame in mapping.items():
        frame.toDF().createOrReplaceTempView(alias)
    result = spark.sql(query)
    return DynamicFrame.fromDF(result, glueContext, transformation_ctx)
args = getResolvedOptions(sys.argv, ['JOB_NAME'])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

# Script generated for node AWS Glue Data Catalog-customer_curated
AWSGlueDataCatalogcustomer_curated_node1715171853967 = glueContext.create_dynamic_frame.from_catalog(database="mpetr", table_name="customer_curated", transformation_ctx="AWSGlueDataCatalogcustomer_curated_node1715171853967")

# Script generated for node AWS Glue Data Catalog-step_trainer_landing
AWSGlueDataCatalogstep_trainer_landing_node1715173319614 = glueContext.create_dynamic_frame.from_catalog(database="mpetr", table_name="step_trainer_landing", transformation_ctx="AWSGlueDataCatalogstep_trainer_landing_node1715173319614")

# Script generated for node Join
Join_node1715171950211 = Join.apply(frame1=AWSGlueDataCatalogcustomer_curated_node1715171853967, frame2=AWSGlueDataCatalogstep_trainer_landing_node1715173319614, keys1=["serialnumber"], keys2=["serialnumber"], transformation_ctx="Join_node1715171950211")

# Script generated for node SQL Query
SqlQuery0 = '''
select distinct serialnumber,sensorreadingtime,distancefromobject 
from myDataSource
'''
SQLQuery_node1715173658557 = sparkSqlQuery(glueContext, query = SqlQuery0, mapping = {"myDataSource":Join_node1715171950211}, transformation_ctx = "SQLQuery_node1715173658557")

# Script generated for node step_trainer_trusted
step_trainer_trusted_node1715174089168 = glueContext.getSink(path="s3://mpetrus-bucket/step_trainer/trusted/", connection_type="s3", updateBehavior="UPDATE_IN_DATABASE", partitionKeys=[], enableUpdateCatalog=True, transformation_ctx="step_trainer_trusted_node1715174089168")
step_trainer_trusted_node1715174089168.setCatalogInfo(catalogDatabase="mpetr",catalogTableName="step_trainer_trusted")
step_trainer_trusted_node1715174089168.setFormat("json")
step_trainer_trusted_node1715174089168.writeFrame(SQLQuery_node1715173658557)
job.commit()
